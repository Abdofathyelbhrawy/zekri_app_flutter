import 'package:flutter/material.dart';
import 'dart:math';
import '../models/dhikr.dart';
import '../widgets/dhikr_card.dart';
import '../widgets/completed_dhikr_list.dart';

class DhikrHomePage extends StatefulWidget {
  const DhikrHomePage({super.key});

  @override
  State<DhikrHomePage> createState() => _DhikrHomePageState();
}

class _DhikrHomePageState extends State<DhikrHomePage> {
  final List<Dhikr> allAdhkar = [
    Dhikr(text: "ุณุจุญุงู ุงููู ูุจุญูุฏู", count: 100, reference: "ูุชูู ุนููู"),
    Dhikr(
      text:
          "ูุง ุงูู ุงูุง ุงููู ูุญุฏู ูุง ุดุฑูู ููุ ูู ุงูููู ููู ุงูุญูุฏ ููู ุนูู ูู ุดูุก ูุฏูุฑ",
      count: 100,
      reference: "ูุชูู ุนููู",
    ),
    Dhikr(
      text: "ุงุณุชุบูุฑ ุงููู ุงูุนุธูู ุงูุฐู ูุง ุงูู ุงูุง ูู ุงูุญู ุงููููู ูุฃุชูุจ ุฅููู",
      count: 100,
      reference: "ุงูุชุฑูุฐู",
    ),
    Dhikr(
      text: "ุงูููู ุตู ูุณูู ูุจุงุฑู ุนูู ูุจููุง ูุญูุฏ",
      count: 100,
      reference: "ูุณูู",
    ),
    Dhikr(
      text: "ุญุณุจู ุงููู ูุง ุงูู ุงูุง ูู ุนููู ุชูููุช ููู ุฑุจ ุงูุนุฑุด ุงูุนุธูู",
      count: 7,
      reference: "ุงูุชูุจุฉ: 129",
    ),
    Dhikr(
      text: "ุงูููู ุฅูู ุฃุณุฃูู ุงูุฌูุฉ ูุฃุนูุฐ ุจู ูู ุงููุงุฑ",
      count: 100,
      reference: "ุงูุชุฑูุฐู",
    ),
    Dhikr(
      text: "ุงูููู ุงุบูุฑ ูู ูุงุฑุญููู ูุงูุฏูู",
      count: 100,
      reference: "ุงูุชุฑูุฐู",
    ),
    Dhikr(
      text:
          "ุจุณู ุงููู ุงูุฐู ูุง ูุถุฑ ูุน ุงุณูู ุดูุก ูู ุงูุฃุฑุถ ููุง ูู ุงูุณูุงุก ููู ุงูุณููุน ุงูุนููู",
      count: 3,
      reference: "ุงูุชุฑูุฐู",
    ),
    Dhikr(
      text: "ุฃุนูุฐ ุจูููุงุช ุงููู ุงูุชุงูุงุช ูู ุดุฑ ูุง ุฎูู",
      count: 3,
      reference: "ูุณูู",
    ),
    Dhikr(
      text:
          "ุณูุจูุญูุงูู ุงูููู ููุจูุญูููุฏูููุ ุนูุฏูุฏู ุฎููููููู ููุฑูุถูุง ููููุณููู ููุฒูููุฉู ุนูุฑูุดููู ููููุฏูุงุฏู ููููููุงุชููู",
      count: 3,
      reference: "ุงูุชุฑูุฐู",
    ),
    Dhikr(
      text:
          "ุงูููู ุงูุช ุฑุจู ูุง ุงูู ุงูุง ุงูุช ุฎููุชูู ูุงูุง ุนุจุฏู ูุงูุง ุนูู ุนูุฏู ูุนุฏู ูุง ุงุณุชุทุนุช ุงุนูุฐ ุจู ูู ุดุฑ ูุง ุตูุนุช ุงุจูุก ูู ุจูุนูุชู ุนูู ูุงุจูุก ุจุฐูุจู ูุงุบูุฑ ูู ูุงูู ูุง ูุบูุฑ ุงูุฐููุจ ุงูุง ุงูุช",
      count: 1,
      reference: "ุงูุจุฎุงุฑู",
    ),
    Dhikr(
      text: "ุงูููู ุฅูู ุฃุณุฃูู ุงูุนูู ูุงูุนุงููุฉ ูู ุงูุฏููุง ูุงูุขุฎุฑุฉ",
      count: 3,
      reference: "ุงูุชุฑูุฐู",
    ),
    Dhikr(
      text:
          "ุงููููููููู ุฅููููู ุฃูุณูุฃููููู ุนูููููุง ููุงููุนูุงุ ููุฑูุฒูููุง ุทููููุจูุงุ ููุนูููููุง ููุชูููุจููููุง",
      count: 3,
      reference: "ุงูุชุฑูุฐู",
    ),
    Dhikr(
      text: "ุงูููู ุฅูู ุฃุนูุฐ ุจู ูู ุนุฐุงุจ ุงููุจุฑ",
      count: 3,
      reference: "ุงูุชุฑูุฐู",
    ),
  ];

  late Dhikr currentDhikr;
  late String greeting;
  List<Dhikr> completedAdhkar = [];
  final Random random = Random();
  bool _isCounting = false;

  @override
  void initState() {
    super.initState();
    greeting = getGreeting();
    currentDhikr = getRandomDhikr();
  }

  String getGreeting() {
    final hour = DateTime.now().hour;
    if (hour >= 5 && hour < 12) {
      return 'ุตุจุงุญ ุงูุฎูุฑ ๐';
    } else if (hour >= 12 && hour < 18) {
      return 'ูุณุงุก ุงูุฎูุฑ ๐';
    } else {
      return 'ูุณุงุก ุงูุฎูุฑ ๐';
    }
  }

  Dhikr getRandomDhikr() {
    List<Dhikr> incompleteAdhkar =
        allAdhkar.where((dhikr) => !dhikr.isCompleted).toList();
    if (incompleteAdhkar.isEmpty) {
      for (var dhikr in allAdhkar) {
        dhikr.currentCount = 0;
        dhikr.isCompleted = false;
      }
      completedAdhkar.clear();
      return allAdhkar[random.nextInt(allAdhkar.length)];
    }
    return incompleteAdhkar[random.nextInt(incompleteAdhkar.length)];
  }

  void incrementCounter() {
    setState(() {
      currentDhikr.currentCount++;
      if (currentDhikr.currentCount >= currentDhikr.count) {
        currentDhikr.isCompleted = true;
        completedAdhkar.add(currentDhikr);
        currentDhikr = getRandomDhikr();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ุชู ุฅููุงู ุฐูุฑ: ${currentDhikr.text}'),
            duration: const Duration(seconds: 2),
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    });
  }

  void _startAutoCounting() {
    if (_isCounting) return;
    setState(() {
      _isCounting = true;
    });
    Future.doWhile(() async {
      if (!_isCounting) return false;
      incrementCounter();
      await Future.delayed(const Duration(milliseconds: 300));
      return _isCounting && currentDhikr.currentCount < currentDhikr.count;
    }).whenComplete(() {
      setState(() {
        _isCounting = false;
      });
    });
  }

  void _stopAutoCounting() {
    setState(() {
      _isCounting = false;
    });
  }

  void resetCurrentDhikr() {
    setState(() {
      currentDhikr.currentCount = 0;
      currentDhikr.isCompleted = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final isSmallScreen = size.width < 360;
    return Scaffold(
      appBar: AppBar(
        title: const Text('ุชุทุจูู ุงูุฃุฐูุงุฑ'),
        centerTitle: true,
        backgroundColor: Colors.blueGrey[700],
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () {
              setState(() {
                currentDhikr = getRandomDhikr();
              });
            },
          ),
        ],
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topRight,
            end: Alignment.bottomLeft,
            colors: [
              Color(0xFFE3F6F5),
              Color(0xFFBEE9E8),
              Color(0xFF62B6CB),
              Color(0xFF1B4965),
            ],
          ),
        ),
        child: SafeArea(
          child: SizedBox(
            height: MediaQuery.of(context).size.height -
                kToolbarHeight -
                MediaQuery.of(context).padding.top,
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(12.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Card(
                    margin: const EdgeInsets.symmetric(horizontal: 8),
                    color: Colors.white.withOpacity(0.9),
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Text(
                        greeting,
                        style: Theme.of(
                          context,
                        ).textTheme.headlineSmall?.copyWith(
                              color: Colors.blueGrey[800],
                              fontSize: isSmallScreen ? 18 : 20,
                            ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  DhikrCard(
                    dhikr: currentDhikr,
                    isSmallScreen: isSmallScreen,
                    onIncrement: incrementCounter,
                    onReset: resetCurrentDhikr,
                    isAutoCounting: _isCounting,
                    onToggleAutoCount:
                        _isCounting ? _stopAutoCounting : _startAutoCounting,
                  ),
                  const SizedBox(height: 16),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 8),
                    child: Column(
                      children: [
                        ElevatedButton.icon(
                          onPressed: _isCounting
                              ? _stopAutoCounting
                              : _startAutoCounting,
                          icon: Icon(
                            _isCounting ? Icons.stop : Icons.play_arrow,
                          ),
                          label: Text(
                            _isCounting ? 'ุฅููุงู ุงูุชุณุจูุญ' : 'ุชุณุจูุญ ุชููุงุฆู',
                            style: TextStyle(fontSize: isSmallScreen ? 14 : 16),
                          ),
                          style: ElevatedButton.styleFrom(
                            minimumSize: const Size(double.infinity, 48),
                            backgroundColor: _isCounting
                                ? Colors.red
                                : Colors.lightBlue[400],
                          ),
                        ),
                        const SizedBox(height: 8),
                        ElevatedButton.icon(
                          onPressed: incrementCounter,
                          icon: const Icon(Icons.add),
                          label: const Text(
                            'ุชุณุจูุญ',
                            style: TextStyle(fontSize: 16),
                          ),
                          style: ElevatedButton.styleFrom(
                            minimumSize: const Size(double.infinity, 48),
                            backgroundColor: Colors.lightBlue[400],
                          ),
                        ),
                        const SizedBox(height: 8),
                        OutlinedButton.icon(
                          onPressed: resetCurrentDhikr,
                          icon: const Icon(Icons.restart_alt),
                          label: const Text('ุฅุนุงุฏุฉ ุชุนููู ุงูุนุฏุงุฏ'),
                          style: OutlinedButton.styleFrom(
                            minimumSize: const Size(double.infinity, 48),
                            side: BorderSide(color: Colors.lightBlue[400]!),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  CompletedDhikrList(
                    completedAdhkar: completedAdhkar,
                    isSmallScreen: isSmallScreen,
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
